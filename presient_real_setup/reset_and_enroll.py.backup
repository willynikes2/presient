#!/usr/bin/env python3
"""
Reset Database and Enroll with Real Biometric Data
Collects live MR60BHA2 sensor data for enrollment
"""

import asyncio
import logging
import paho.mqtt.client as mqtt
import time
import statistics
from datetime import datetime
from typing import List
import sys
import os

# Add current directory to path so we can import the matcher
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from real_biometric_matcher import RealBiometricMatcher, BiometricSample

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RealEnrollmentCollector:
    """Collect real biometric data from MR60BHA2 sensor for enrollment"""
    
    def __init__(self):
        self.mqtt_host = "localhost"
        self.mqtt_port = 1883
        self.enrollment_samples: List[BiometricSample] = []
        self.enrollment_duration = 60  # seconds
        self.is_collecting = False
        
    def collect_enrollment_data(self, user_name: str) -> List[BiometricSample]:
        """Collect biometric data for enrollment"""
        logger.info(f"üéØ Starting enrollment data collection for: {user_name}")
        logger.info(f"‚è±Ô∏è Collection time: {self.enrollment_duration} seconds")
        logger.info("üìç Please stay near your MR60BHA2 sensor...")
        
        self.enrollment_samples.clear()
        self.is_collecting = True
        
        # MQTT setup
        def on_message(client, userdata, msg):
            if not self.is_collecting:
                return
                
            try:
                topic = msg.topic
                payload = msg.payload.decode('utf-8')
                
                if "heart_rate" in topic and "/state" in topic:
                    heart_rate = float(payload)
                    
                    # Validate heart rate
                    if 40 <= heart_rate <= 180:
                        sample = BiometricSample(
                            heart_rate=heart_rate,
                            timestamp=datetime.now()
                        )
                        self.enrollment_samples.append(sample)
                        logger.info(f"üíì Collected: {heart_rate:.1f} BPM (sample #{len(self.enrollment_samples)})")
                        
                elif ("breath_rate" in topic or "breathing_rate" in topic) and "/state" in topic:
                    try:
                        breathing_rate = float(payload)
                        # Add to most recent sample if it exists and doesn't have breathing rate
                        if (self.enrollment_samples and 
                            self.enrollment_samples[-1].breathing_rate is None and
                            (datetime.now() - self.enrollment_samples[-1].timestamp).total_seconds() < 5):
                            self.enrollment_samples[-1].breathing_rate = breathing_rate
                            logger.debug(f"ü´Å Added breathing: {breathing_rate:.1f} BPM")
                    except ValueError:
                        pass
                        
            except Exception as e:
                logger.error(f"‚ùå Error processing MQTT message: {e}")
        
        # Connect to MQTT
        client = mqtt.Client(client_id="presient_enrollment_collector")
        client.on_message = on_message
        
        try:
            client.connect(self.mqtt_host, self.mqtt_port, 60)
            
            # Subscribe to all heart rate topics
            topics = [
                "presient/sensor1/heart_rate/state",
                "presient/sensor1/breath_rate/state",
                "presient/sensor1/sensor/presient_mr60bha2_sensor_heart_rate/state",
                "presient/sensor1/sensor/presient_mr60bha2_sensor_breathing_rate/state"
            ]
            
            for topic in topics:
                client.subscribe(topic)
                logger.debug(f"üì° Subscribed to: {topic}")
            
            client.loop_start()
            
            # Collect for specified duration
            start_time = time.time()
            while time.time() - start_time < self.enrollment_duration:
                remaining = self.enrollment_duration - (time.time() - start_time)
                if remaining > 0:
                    if len(self.enrollment_samples) == 0:
                        logger.info(f"‚è≥ Waiting for sensor data... ({remaining:.0f}s remaining)")
                    elif len(self.enrollment_samples) % 10 == 0:
                        logger.info(f"üìä Collected {len(self.enrollment_samples)} samples ({remaining:.0f}s remaining)")
                    time.sleep(1)
            
            self.is_collecting = False
            client.loop_stop()
            client.disconnect()
            
            logger.info(f"‚úÖ Collection complete! Gathered {len(self.enrollment_samples)} samples")
            
            if len(self.enrollment_samples) < 5:
                logger.error("‚ùå Insufficient data collected. Please check your MR60BHA2 sensor.")
                return []
            
            # Show statistics
            heart_rates = [s.heart_rate for s in self.enrollment_samples]
            logger.info(f"üìä Heart Rate Statistics:")
            logger.info(f"   üíì Average: {statistics.mean(heart_rates):.1f} BPM")
            logger.info(f"   üìà Range: {min(heart_rates):.1f} - {max(heart_rates):.1f} BPM")
            logger.info(f"   üìä Std Dev: {statistics.stdev(heart_rates):.1f} BPM")
            
            breathing_rates = [s.breathing_rate for s in self.enrollment_samples if s.breathing_rate]
            if breathing_rates:
                logger.info(f"   ü´Å Breathing: {statistics.mean(breathing_rates):.1f} BPM avg")
            
            return self.enrollment_samples
            
        except Exception as e:
            logger.error(f"‚ùå MQTT connection error: {e}")
            return []

def reset_database_and_enroll():
    """Reset database and enroll with real sensor data"""
    
    logger.info("üéØ Real Biometric Enrollment System")
    logger.info("=" * 50)
    
    # Initialize matcher
    matcher = RealBiometricMatcher()
    
    # Reset existing data
    logger.info("üóëÔ∏è Resetting biometric database...")
    matcher.clear_profiles()
    logger.info("‚úÖ Database reset complete")
    
    # Get user details
    print("\nüìù User Enrollment")
    user_name = input("Enter your name: ").strip()
    if not user_name:
        user_name = "Test User"
    
    user_id = user_name.lower().replace(" ", "_")
    
    logger.info(f"üë§ Enrolling user: {user_name}")
    logger.info(f"üÜî User ID: {user_id}")
    
    # Collect enrollment data
    collector = RealEnrollmentCollector()
    samples = collector.collect_enrollment_data(user_name)
    
    if not samples:
        logger.error("‚ùå Enrollment failed - no data collected")
        return False
    
    # Enroll user
    try:
        profile = matcher.enroll_user_with_samples(user_id, user_name, samples)
        
        logger.info("üéâ Enrollment Success!")
        logger.info(f"‚úÖ Profile created for: {profile.name}")
        logger.info(f"üíì Baseline: {profile.heart_rate_baseline:.1f} BPM")
        logger.info(f"üìä Range: {profile.heart_rate_range[0]:.1f} - {profile.heart_rate_range[1]:.1f} BPM")
        logger.info(f"üéØ Confidence threshold: {profile.confidence_threshold:.0%}")
        
        # Test the matcher
        logger.info("\nüß™ Testing biometric matcher...")
        
        # Add some samples for testing
        test_samples = samples[-5:]  # Use last 5 samples
        for sample in test_samples:
            matcher.add_sample(sample)
        
        # Try to find a match
        match_result = matcher.find_best_match(presence_detected=True)
        
        if match_result:
            logger.info(f"‚úÖ Test match successful!")
            logger.info(f"üéØ Matched: {match_result.name} ({match_result.confidence:.1%})")
        else:
            logger.warning("‚ö†Ô∏è Test match failed - you may need to adjust thresholds")
        
        logger.info("\nüéØ Real biometric enrollment complete!")
        logger.info("üìç Walk near your sensor to trigger authentication")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enrollment error: {e}")
        return False

def main():
    """Main enrollment function"""
    
    print("ü´Ä Presient Real Biometric Enrollment")
    print("=====================================")
    print()
    print("This will:")
    print("‚úÖ Reset the biometric database")
    print("‚úÖ Collect your real heart rate data from MR60BHA2 sensor")
    print("‚úÖ Create your biometric profile for authentication")
    print()
    
    # Check if user wants to proceed
    response = input("Ready to start? (y/n): ").strip().lower()
    if response != 'y':
        print("‚ùå Enrollment cancelled")
        return
    
    # Check MQTT connectivity first
    print("\nüîç Checking MR60BHA2 sensor connectivity...")
    
    try:
        test_client = mqtt.Client(client_id="presient_test_connection")
        test_client.connect("localhost", 1883, 10)
        test_client.disconnect()
        print("‚úÖ MQTT broker connection successful")
    except Exception as e:
        print(f"‚ùå Cannot connect to MQTT broker: {e}")
        print("Please ensure:")
        print("  1. Mosquitto MQTT broker is running")
        print("  2. Your MR60BHA2 sensor is connected and publishing data")
        return
    
    # Run enrollment
    success = reset_database_and_enroll()
    
    if success:
        print("\nüéâ SUCCESS! Your real biometric profile is ready!")
        print("\nNext steps:")
        print("1. Restart your Presient backend")
        print("2. Walk near your MR60BHA2 sensor")
        print("3. Watch for Ring-style notifications!")
    else:
        print("\n‚ùå Enrollment failed. Please check your sensor setup.")

if __name__ == "__main__":
    main()